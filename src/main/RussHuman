import java.util.ArrayList;
import java.util.Scanner;


/**
 * ---------------------------------------------------------------------------
 * File name: RussHuman.java
 * Project name: GameOfUr
 * ---------------------------------------------------------------------------
 * Creator's name and email: Russ Stipelcovich, stipelcovich@etsu.edu
 * Course:  CSCI 1260
 * Creation Date: Nov 23, 2019
 * ---------------------------------------------------------------------------
 */

/**
 * This subclass will extend RussPlayer abstract superclass to create player1 and player2 Player-type objects that are 
 *  used in the other classes
 * <hr>
 * Date created: Nov 23, 2019
 * <hr>
 * @author Russ Stipelcovich
 */
public class Human extends Player

{

    /* Player attribute:
     *
     *  protected int id;      //player ID
     *
     *  protected ArrayList<Token> tokens;     //list of tokens that did not reach the goal yet
     */

    /** Constructor calls the Human superclass
     * 
     *
     *@param id Player ID
     */

    public Human(int id)
	
	 {
       super(id);
   }


    /**This method is called every time the player can move a token
     * 
     * @param board Game board
     * @param opponentsTokens Tokens of your opponent
     * @param dice dice result
     * @return Token that should be moved this turn
     */
    
	//@SuppressWarnings ("resource") - I'm not sure what this if for.  Need to research if it is required.
	@Override
    
	public Token turn(Tile[] board, ArrayList<Token> opponentsTokens, int dice)
	
	{
       while(true)
       
       while(true)
       
       {
            System.out.print("Enter Valid Token id ( ");
       
            for(Token t:tokens)
            
            {
                System.out.print("("+t.getId()+") ");
            }
            
            System.out.print("):\n");
            
            Scanner scanner = new Scanner(System.in);
			
            int id = scanner.nextInt();

            for(Token t:tokens)
            
            {
                if(id == t.getId())
                
                {
                    return t;
                }
            }
        }
        

    /** This method returns the players type
     * @return Player type*/
    
	@Override
    
	public String getType()
  
  {
      return "Human player object";
  }

}
